#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace NDG.DataAccessModels
{

    public partial class NdgDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertAnswer(Answer instance);
        partial void UpdateAnswer(Answer instance);
        partial void DeleteAnswer(Answer instance);
        partial void InsertCategory(Category instance);
        partial void UpdateCategory(Category instance);
        partial void DeleteCategory(Category instance);
        partial void InsertLanguage(Language instance);
        partial void UpdateLanguage(Language instance);
        partial void DeleteLanguage(Language instance);
        partial void InsertPhotoResolution(PhotoResolution instance);
        partial void UpdatePhotoResolution(PhotoResolution instance);
        partial void DeletePhotoResolution(PhotoResolution instance);
        partial void InsertQuestion(Question instance);
        partial void UpdateQuestion(Question instance);
        partial void DeleteQuestion(Question instance);
        partial void InsertResponseSet(ResponseSet instance);
        partial void UpdateResponseSet(ResponseSet instance);
        partial void DeleteResponseSet(ResponseSet instance);
        partial void InsertServer(Server instance);
        partial void UpdateServer(Server instance);
        partial void DeleteServer(Server instance);
        partial void InsertSettings(Settings instance);
        partial void UpdateSettings(Settings instance);
        partial void DeleteSettings(Settings instance);
        partial void InsertSurvey(Survey instance);
        partial void UpdateSurvey(Survey instance);
        partial void DeleteSurvey(Survey instance);
        partial void InsertUser(User instance);
        partial void UpdateUser(User instance);
        partial void DeleteUser(User instance);
        #endregion

        public NdgDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public NdgDataContext() :
            base("DataSource= 'isostore:/NdgDB.sdf'; Max Database Size = 512;", mappingSource)
        {
                 OnCreated();
        }

        public System.Data.Linq.Table<Answer> Answer
        {
            get
            {
                return this.GetTable<Answer>();
            }
        }

        public System.Data.Linq.Table<Category> Category
        {
            get
            {
                return this.GetTable<Category>();
            }
        }

        public System.Data.Linq.Table<DependentQuestions> DependentQuestions
        {
            get
            {
                return this.GetTable<DependentQuestions>();
            }
        }

        public System.Data.Linq.Table<Language> Language
        {
            get
            {
                return this.GetTable<Language>();
            }
        }

        public System.Data.Linq.Table<PhotoResolution> PhotoResolution
        {
            get
            {
                return this.GetTable<PhotoResolution>();
            }
        }

        public System.Data.Linq.Table<Question> Question
        {
            get
            {
                return this.GetTable<Question>();
            }
        }

        public System.Data.Linq.Table<ResponseSet> ResponseSet
        {
            get
            {
                return this.GetTable<ResponseSet>();
            }
        }

        public System.Data.Linq.Table<Server> Server
        {
            get
            {
                return this.GetTable<Server>();
            }
        }

        public System.Data.Linq.Table<Settings> Settings
        {
            get
            {
                return this.GetTable<Settings>();
            }
        }

        public System.Data.Linq.Table<Survey> Survey
        {
            get
            {
                return this.GetTable<Survey>();
            }
        }

        public System.Data.Linq.Table<User> User
        {
            get
            {
                return this.GetTable<User>();
            }
        }
    }

    [Table(Name = "Answer")]
    public partial class Answer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ResponseSetID;

        private System.Nullable<int> _QuestionID;

        private string _AnswerText;

        private EntityRef<Question> _Question;

        private EntityRef<ResponseSet> _ResponseSet;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnResponseSetIDChanging(int value);
        partial void OnResponseSetIDChanged();
        partial void OnQuestionIDChanging(System.Nullable<int> value);
        partial void OnQuestionIDChanged();
        partial void OnAnswerTextChanging(string value);
        partial void OnAnswerTextChanged();
        #endregion

        public Answer()
        {
            this._Question = default(EntityRef<Question>);
            this._ResponseSet = default(EntityRef<ResponseSet>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_ResponseSetID", DbType = "Int NOT NULL")]
        public int ResponseSetID
        {
            get
            {
                return this._ResponseSetID;
            }
            set
            {
                if ((this._ResponseSetID != value))
                {
                    if (this._ResponseSet.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnResponseSetIDChanging(value);
                    this.SendPropertyChanging();
                    this._ResponseSetID = value;
                    this.SendPropertyChanged("ResponseSetID");
                    this.OnResponseSetIDChanged();
                }
            }
        }

        [Column(Storage = "_QuestionID", DbType = "Int")]
        public System.Nullable<int> QuestionID
        {
            get
            {
                return this._QuestionID;
            }
            set
            {
                if ((this._QuestionID != value))
                {
                    if (this._Question.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnQuestionIDChanging(value);
                    this.SendPropertyChanging();
                    this._QuestionID = value;
                    this.SendPropertyChanged("QuestionID");
                    this.OnQuestionIDChanged();
                }
            }
        }

        [Column(Storage = "_AnswerText", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string AnswerText
        {
            get
            {
                return this._AnswerText;
            }
            set
            {
                if ((this._AnswerText != value))
                {
                    this.OnAnswerTextChanging(value);
                    this.SendPropertyChanging();
                    this._AnswerText = value;
                    this.SendPropertyChanged("AnswerText");
                    this.OnAnswerTextChanged();
                }
            }
        }

        [Association(Name = "FK_Answer_Question", Storage = "_Question", ThisKey = "QuestionID", OtherKey = "ID", IsForeignKey = true)]
        public Question Question
        {
            get
            {
                return this._Question.Entity;
            }
            set
            {
                Question previousValue = this._Question.Entity;
                if (((previousValue != value)
                            || (this._Question.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Question.Entity = null;
                        previousValue.Answer.Remove(this);
                    }
                    this._Question.Entity = value;
                    if ((value != null))
                    {
                        value.Answer.Add(this);
                        this._QuestionID = value.ID;
                    }
                    else
                    {
                        this._QuestionID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Question");
                }
            }
        }

        [Association(Name = "FK_Answer_ResponseSet", Storage = "_ResponseSet", ThisKey = "ResponseSetID", OtherKey = "ID", IsForeignKey = true, DeleteOnNull = true)]
        public ResponseSet ResponseSet
        {
            get
            {
                return this._ResponseSet.Entity;
            }
            set
            {
                ResponseSet previousValue = this._ResponseSet.Entity;
                if (((previousValue != value)
                            || (this._ResponseSet.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._ResponseSet.Entity = null;
                        previousValue.Answer.Remove(this);
                    }
                    this._ResponseSet.Entity = value;
                    if ((value != null))
                    {
                        value.Answer.Add(this);
                        this._ResponseSetID = value.ID;
                    }
                    else
                    {
                        this._ResponseSetID = default(int);
                    }
                    this.SendPropertyChanged("ResponseSet");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "Category")]
    public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _SurveyID;

        private string _Name;

        private string _SystemID;

        private EntityRef<Survey> _Survey;

        private EntitySet<Question> _Question;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnSurveyIDChanging(int value);
        partial void OnSurveyIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSystemIDChanging(string value);
        partial void OnSystemIDChanged();
        #endregion

        public Category()
        {
            this._Survey = default(EntityRef<Survey>);
            this._Question = new EntitySet<Question>(new Action<Question>(this.attach_Question), new Action<Question>(this.detach_Question));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_SurveyID", DbType = "Int NOT NULL")]
        public int SurveyID
        {
            get
            {
                return this._SurveyID;
            }
            set
            {
                if ((this._SurveyID != value))
                {
                    if (this._Survey.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSurveyIDChanging(value);
                    this.SendPropertyChanging();
                    this._SurveyID = value;
                    this.SendPropertyChanged("SurveyID");
                    this.OnSurveyIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_SystemID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string SystemID
        {
            get
            {
                return this._SystemID;
            }
            set
            {
                if ((this._SystemID != value))
                {
                    this.OnSystemIDChanging(value);
                    this.SendPropertyChanging();
                    this._SystemID = value;
                    this.SendPropertyChanged("SystemID");
                    this.OnSystemIDChanged();
                }
            }
        }

        [Association(Name = "FK_Categories_Survey", Storage = "_Survey", ThisKey = "SurveyID", OtherKey = "ID", IsForeignKey = true, DeleteOnNull = true)]
        public Survey Survey
        {
            get
            {
                return this._Survey.Entity;
            }
            set
            {
                Survey previousValue = this._Survey.Entity;
                if (((previousValue != value)
                            || (this._Survey.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Survey.Entity = null;
                        previousValue.Category.Remove(this);
                    }
                    this._Survey.Entity = value;
                    if ((value != null))
                    {
                        value.Category.Add(this);
                        this._SurveyID = value.ID;
                    }
                    else
                    {
                        this._SurveyID = default(int);
                    }
                    this.SendPropertyChanged("Survey");
                }
            }
        }

        [Association(Name = "FK_Questions_Category", Storage = "_Question", ThisKey = "ID", OtherKey = "CategoryID", DeleteRule = "CASCADE")]
        public EntitySet<Question> Question
        {
            get
            {
                return this._Question;
            }
            set
            {
                this._Question.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Question(Question entity)
        {
            this.SendPropertyChanging();
            entity.Category = this;
        }

        private void detach_Question(Question entity)
        {
            this.SendPropertyChanging();
            entity.Category = null;
        }
    }

    [Table(Name = "DependentQuestions")]
    public partial class DependentQuestions : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ParentQuestionID;

        private string _RequiredAnswer;

        private EntityRef<Question> _Question;

        private EntitySet<Question> _Question_DependentQuestions;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParentQuestionIDChanging(int value);
        partial void OnParentQuestionIDChanged();
        partial void OnRequiredAnswerChanging(string value);
        partial void OnRequiredAnswerChanged();
        #endregion

        public DependentQuestions()
        {
            this._Question = default(EntityRef<Question>);
            this._Question_DependentQuestions = new EntitySet<Question>(new Action<Question>(this.attach_Question_DependentQuestions), new Action<Question>(this.detach_Question_DependentQuestions));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_ParentQuestionID", DbType = "Int NOT NULL")]
        public int ParentQuestionID
        {
            get
            {
                return this._ParentQuestionID;
            }
            set
            {
                if ((this._ParentQuestionID != value))
                {
                    if (this._Question.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnParentQuestionIDChanging(value);
                    this.SendPropertyChanging();
                    this._ParentQuestionID = value;
                    this.SendPropertyChanged("ParentQuestionID");
                    this.OnParentQuestionIDChanged();
                }
            }
        }

        [Column(Storage = "_RequiredAnswer", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string RequiredAnswer
        {
            get
            {
                return this._RequiredAnswer;
            }
            set
            {
                if ((this._RequiredAnswer != value))
                {
                    this.OnRequiredAnswerChanging(value);
                    this.SendPropertyChanging();
                    this._RequiredAnswer = value;
                    this.SendPropertyChanged("RequiredAnswer");
                    this.OnRequiredAnswerChanged();
                }
            }
        }

        [Association(Name = "FK_DependentQuestions_Question", Storage = "_Question", ThisKey = "ParentQuestionID", OtherKey = "ID", IsForeignKey = true)]
        public Question Question
        {
            get
            {
                return this._Question.Entity;
            }
            set
            {
                Question previousValue = this._Question.Entity;
                if (((previousValue != value)
                            || (this._Question.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Question.Entity = null;
                        previousValue.DependentQuestions.Remove(this);
                    }
                    this._Question.Entity = value;
                    if ((value != null))
                    {
                        value.DependentQuestions.Add(this);
                        this._ParentQuestionID = value.ID;
                    }
                    else
                    {
                        this._ParentQuestionID = default(int);
                    }
                    this.SendPropertyChanged("Question");
                }
            }
        }

        [Association(Name = "FK_Question_DependentQuestions", Storage = "_Question_DependentQuestions", ThisKey = "ID", OtherKey = "DependentQuestionID", DeleteRule = "SET NULL")]
        public EntitySet<Question> Question_DependentQuestions
        {
            get
            {
                return this._Question_DependentQuestions;
            }
            set
            {
                this._Question_DependentQuestions.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Question_DependentQuestions(Question entity)
        {
            this.SendPropertyChanging();
            entity.DependentQuestion = this;
        }

        private void detach_Question_DependentQuestions(Question entity)
        {
            this.SendPropertyChanging();
            entity.DependentQuestion = null;
        }
    }

    [Table(Name = "Language")]
    public partial class Language : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private string _Culture;

        private string _Path;

        private EntitySet<Settings> _Settings;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnCultureChanging(string value);
        partial void OnCultureChanged();
        partial void OnPathChanging(string value);
        partial void OnPathChanged();
        #endregion

        public Language()
        {
            this._Settings = new EntitySet<Settings>(new Action<Settings>(this.attach_Settings), new Action<Settings>(this.detach_Settings));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_Culture", DbType = "NVarChar(5) NOT NULL", CanBeNull = false)]
        public string Culture
        {
            get
            {
                return this._Culture;
            }
            set
            {
                if ((this._Culture != value))
                {
                    this.OnCultureChanging(value);
                    this.SendPropertyChanging();
                    this._Culture = value;
                    this.SendPropertyChanged("Culture");
                    this.OnCultureChanged();
                }
            }
        }

        [Column(Storage = "_Path", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Path
        {
            get
            {
                return this._Path;
            }
            set
            {
                if ((this._Path != value))
                {
                    this.OnPathChanging(value);
                    this.SendPropertyChanging();
                    this._Path = value;
                    this.SendPropertyChanged("Path");
                    this.OnPathChanged();
                }
            }
        }

        [Association(Name = "FK_Settings_Language", Storage = "_Settings", ThisKey = "ID", OtherKey = "LanguageID", DeleteRule = "NO ACTION")]
        public EntitySet<Settings> Settings
        {
            get
            {
                return this._Settings;
            }
            set
            {
                this._Settings.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Settings(Settings entity)
        {
            this.SendPropertyChanging();
            entity.Language = this;
        }

        private void detach_Settings(Settings entity)
        {
            this.SendPropertyChanging();
            entity.Language = null;
        }
    }

    [Table(Name = "PhotoResolution")]
    public partial class PhotoResolution : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _Width;

        private int _Height;

        private EntitySet<Settings> _Settings;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnWidthChanging(int value);
        partial void OnWidthChanged();
        partial void OnHeightChanging(int value);
        partial void OnHeightChanged();
        #endregion

        public PhotoResolution()
        {
            this._Settings = new EntitySet<Settings>(new Action<Settings>(this.attach_Settings), new Action<Settings>(this.detach_Settings));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Width", DbType = "Int NOT NULL")]
        public int Width
        {
            get
            {
                return this._Width;
            }
            set
            {
                if ((this._Width != value))
                {
                    this.OnWidthChanging(value);
                    this.SendPropertyChanging();
                    this._Width = value;
                    this.SendPropertyChanged("Width");
                    this.OnWidthChanged();
                }
            }
        }

        [Column(Storage = "_Height", DbType = "Int NOT NULL")]
        public int Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if ((this._Height != value))
                {
                    this.OnHeightChanging(value);
                    this.SendPropertyChanging();
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        [Association(Name = "FK_Settings_PhotoResolution", Storage = "_Settings", ThisKey = "ID", OtherKey = "PhotoResolutionID", DeleteRule = "NO ACTION")]
        public EntitySet<Settings> Settings
        {
            get
            {
                return this._Settings;
            }
            set
            {
                this._Settings.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Settings(Settings entity)
        {
            this.SendPropertyChanging();
            entity.PhotoResolution = this;
        }

        private void detach_Settings(Settings entity)
        {
            this.SendPropertyChanging();
            entity.PhotoResolution = null;
        }

        public override string ToString()
        {
            return this.Width + "x" + this.Height;
        }
    }

    [Table(Name = "Question")]
    public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _XML;

        private System.Nullable<int> _CategoryID;

        private QuestionType _Type;

        private string _SystemID;

        private System.Nullable<int> _DependentQuestionID;

        private EntitySet<Answer> _Answer;

        private EntitySet<DependentQuestions> _DependentQuestions;

        private EntityRef<DependentQuestions> _DependentQuestion;

        private EntityRef<Category> _Category;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnXMLChanging(string value);
        partial void OnXMLChanged();
        partial void OnCategoryIDChanging(System.Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnTypeChanging(QuestionType value);
        partial void OnTypeChanged();
        partial void OnSystemIDChanging(string value);
        partial void OnSystemIDChanged();
        partial void OnDependentQuestionIDChanging(System.Nullable<int> value);
        partial void OnDependentQuestionIDChanged();
        #endregion

        public Question()
        {
            this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
            this._DependentQuestions = new EntitySet<DependentQuestions>(new Action<DependentQuestions>(this.attach_DependentQuestions), new Action<DependentQuestions>(this.detach_DependentQuestions));
            this._DependentQuestion = default(EntityRef<DependentQuestions>);
            this._Category = default(EntityRef<Category>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_XML", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string XML
        {
            get
            {
                return this._XML;
            }
            set
            {
                if ((this._XML != value))
                {
                    this.OnXMLChanging(value);
                    this.SendPropertyChanging();
                    this._XML = value;
                    this.SendPropertyChanged("XML");
                    this.OnXMLChanged();
                }
            }
        }

        [Column(Storage = "_CategoryID", DbType = "Int")]
        public System.Nullable<int> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if ((this._CategoryID != value))
                {
                    if (this._Category.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }

        [Column(Storage = "_Type", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public QuestionType Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if ((this._Type != value))
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging();
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

        [Column(Storage = "_SystemID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string SystemID
        {
            get
            {
                return this._SystemID;
            }
            set
            {
                if ((this._SystemID != value))
                {
                    this.OnSystemIDChanging(value);
                    this.SendPropertyChanging();
                    this._SystemID = value;
                    this.SendPropertyChanged("SystemID");
                    this.OnSystemIDChanged();
                }
            }
        }

        [Column(Storage = "_DependentQuestionID", DbType = "Int")]
        public System.Nullable<int> DependentQuestionID
        {
            get
            {
                return this._DependentQuestionID;
            }
            set
            {
                if ((this._DependentQuestionID != value))
                {
                    if (this._DependentQuestion.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnDependentQuestionIDChanging(value);
                    this.SendPropertyChanging();
                    this._DependentQuestionID = value;
                    this.SendPropertyChanged("DependentQuestionID");
                    this.OnDependentQuestionIDChanged();
                }
            }
        }

        [Association(Name = "FK_Answer_Question", Storage = "_Answer", ThisKey = "ID", OtherKey = "QuestionID", DeleteRule = "NO ACTION")]
        public EntitySet<Answer> Answer
        {
            get
            {
                return this._Answer;
            }
            set
            {
                this._Answer.Assign(value);
            }
        }

        [Association(Name = "FK_DependentQuestions_Question", Storage = "_DependentQuestions", ThisKey = "ID", OtherKey = "ParentQuestionID", DeleteRule = "NO ACTION")]
        public EntitySet<DependentQuestions> DependentQuestions
        {
            get
            {
                return this._DependentQuestions;
            }
            set
            {
                this._DependentQuestions.Assign(value);
            }
        }

        [Association(Name = "FK_Question_DependentQuestions", Storage = "_DependentQuestion", ThisKey = "DependentQuestionID", OtherKey = "ID", IsForeignKey = true)]
        public DependentQuestions DependentQuestion
        {
            get
            {
                return this._DependentQuestion.Entity;
            }
            set
            {
                DependentQuestions previousValue = this._DependentQuestion.Entity;
                if (((previousValue != value)
                            || (this._DependentQuestion.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._DependentQuestion.Entity = null;
                        previousValue.Question_DependentQuestions.Remove(this);
                    }
                    this._DependentQuestion.Entity = value;
                    if ((value != null))
                    {
                        value.Question_DependentQuestions.Add(this);
                        this._DependentQuestionID = value.ID;
                    }
                    else
                    {
                        this._DependentQuestionID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("DependentQuestion");
                }
            }
        }

        [Association(Name = "FK_Questions_Category", Storage = "_Category", ThisKey = "CategoryID", OtherKey = "ID", IsForeignKey = true)]
        public Category Category
        {
            get
            {
                return this._Category.Entity;
            }
            set
            {
                Category previousValue = this._Category.Entity;
                if (((previousValue != value)
                            || (this._Category.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Category.Entity = null;
                        previousValue.Question.Remove(this);
                    }
                    this._Category.Entity = value;
                    if ((value != null))
                    {
                        value.Question.Add(this);
                        this._CategoryID = value.ID;
                    }
                    else
                    {
                        this._CategoryID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Category");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Answer(Answer entity)
        {
            this.SendPropertyChanging();
            entity.Question = this;
        }

        private void detach_Answer(Answer entity)
        {
            this.SendPropertyChanging();
            entity.Question = null;
        }

        private void attach_DependentQuestions(DependentQuestions entity)
        {
            this.SendPropertyChanging();
            entity.Question = this;
        }

        private void detach_DependentQuestions(DependentQuestions entity)
        {
            this.SendPropertyChanging();
            entity.Question = null;
        }
    }

    [Table(Name = "ResponseSet")]
    public partial class ResponseSet : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private bool _IsSubmitted;

        private int _UserID;

        private int _SurveyID;

        private System.Nullable<System.DateTime> _DateSubmitted;

        private System.Nullable<System.DateTime> _DateSaved;

        private string _SystemID;

        private string _Name;

        private System.Nullable<System.DateTime> _DateModified;

        private bool _IsCompleted;

        private double _Progress;

        private EntitySet<Answer> _Answer;

        private EntityRef<Survey> _Survey;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsSubmittedChanging(bool value);
        partial void OnIsSubmittedChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnSurveyIDChanging(int value);
        partial void OnSurveyIDChanged();
        partial void OnDateSubmittedChanging(System.Nullable<System.DateTime> value);
        partial void OnDateSubmittedChanged();
        partial void OnDateSavedChanging(System.Nullable<System.DateTime> value);
        partial void OnDateSavedChanged();
        partial void OnSystemIDChanging(string value);
        partial void OnSystemIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
        partial void OnDateModifiedChanged();
        partial void OnIsCompletedChanging(bool value);
        partial void OnIsCompletedChanged();
        partial void OnProgressChanging(double value);
        partial void OnProgressChanged();
        #endregion

        public ResponseSet()
        {
            this._Answer = new EntitySet<Answer>(new Action<Answer>(this.attach_Answer), new Action<Answer>(this.detach_Answer));
            this._Survey = default(EntityRef<Survey>);
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_IsSubmitted", DbType = "Bit NOT NULL")]
        public bool IsSubmitted
        {
            get
            {
                return this._IsSubmitted;
            }
            set
            {
                if ((this._IsSubmitted != value))
                {
                    this.OnIsSubmittedChanging(value);
                    this.SendPropertyChanging();
                    this._IsSubmitted = value;
                    this.SendPropertyChanged("IsSubmitted");
                    this.OnIsSubmittedChanged();
                }
            }
        }

        [Column(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [Column(Storage = "_SurveyID", DbType = "Int NOT NULL")]
        public int SurveyID
        {
            get
            {
                return this._SurveyID;
            }
            set
            {
                if ((this._SurveyID != value))
                {
                    if (this._Survey.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnSurveyIDChanging(value);
                    this.SendPropertyChanging();
                    this._SurveyID = value;
                    this.SendPropertyChanged("SurveyID");
                    this.OnSurveyIDChanged();
                }
            }
        }

        [Column(Storage = "_DateSubmitted", DbType = "DateTime")]
        public System.Nullable<System.DateTime> DateSubmitted
        {
            get
            {
                return this._DateSubmitted;
            }
            set
            {
                if ((this._DateSubmitted != value))
                {
                    this.OnDateSubmittedChanging(value);
                    this.SendPropertyChanging();
                    this._DateSubmitted = value;
                    this.SendPropertyChanged("DateSubmitted");
                    this.OnDateSubmittedChanged();
                }
            }
        }

        [Column(Storage = "_DateSaved", DbType = "DateTime")]
        public System.Nullable<System.DateTime> DateSaved
        {
            get
            {
                return this._DateSaved;
            }
            set
            {
                if ((this._DateSaved != value))
                {
                    this.OnDateSavedChanging(value);
                    this.SendPropertyChanging();
                    this._DateSaved = value;
                    this.SendPropertyChanged("DateSaved");
                    this.OnDateSavedChanged();
                }
            }
        }

        [Column(Storage = "_SystemID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string SystemID
        {
            get
            {
                return this._SystemID;
            }
            set
            {
                if ((this._SystemID != value))
                {
                    this.OnSystemIDChanging(value);
                    this.SendPropertyChanging();
                    this._SystemID = value;
                    this.SendPropertyChanged("SystemID");
                    this.OnSystemIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_DateModified", DbType = "DateTime")]
        public System.Nullable<System.DateTime> DateModified
        {
            get
            {
                return this._DateModified;
            }
            set
            {
                if ((this._DateModified != value))
                {
                    this.OnDateModifiedChanging(value);
                    this.SendPropertyChanging();
                    this._DateModified = value;
                    this.SendPropertyChanged("DateModified");
                    this.OnDateModifiedChanged();
                }
            }
        }

        [Column(Storage = "_IsCompleted", DbType = "Bit NOT NULL")]
        public bool IsCompleted
        {
            get
            {
                return this._IsCompleted;
            }
            set
            {
                if ((this._IsCompleted != value))
                {
                    this.OnIsCompletedChanging(value);
                    this.SendPropertyChanging();
                    this._IsCompleted = value;
                    this.SendPropertyChanged("IsCompleted");
                    this.OnIsCompletedChanged();
                }
            }
        }

        [Column(Storage = "_Progress", DbType = "Float NOT NULL")]
        public double Progress
        {
            get
            {
                return this._Progress;
            }
            set
            {
                if ((this._Progress != value))
                {
                    this.OnProgressChanging(value);
                    this.SendPropertyChanging();
                    this._Progress = value;
                    this.SendPropertyChanged("Progress");
                    this.OnProgressChanged();
                }
            }
        }

        [Association(Name = "FK_Answer_ResponseSet", Storage = "_Answer", ThisKey = "ID", OtherKey = "ResponseSetID", DeleteRule = "CASCADE")]
        public EntitySet<Answer> Answer
        {
            get
            {
                return this._Answer;
            }
            set
            {
                this._Answer.Assign(value);
            }
        }

        [Association(Name = "FK_ResponseSets_Survey", Storage = "_Survey", ThisKey = "SurveyID", OtherKey = "ID", IsForeignKey = true, DeleteOnNull = true)]
        public Survey Survey
        {
            get
            {
                return this._Survey.Entity;
            }
            set
            {
                Survey previousValue = this._Survey.Entity;
                if (((previousValue != value)
                            || (this._Survey.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Survey.Entity = null;
                        previousValue.ResponseSet.Remove(this);
                    }
                    this._Survey.Entity = value;
                    if ((value != null))
                    {
                        value.ResponseSet.Add(this);
                        this._SurveyID = value.ID;
                    }
                    else
                    {
                        this._SurveyID = default(int);
                    }
                    this.SendPropertyChanged("Survey");
                }
            }
        }

        [Association(Name = "FK_ResponseSets_User", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.ResponseSet.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.ResponseSet.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Answer(Answer entity)
        {
            this.SendPropertyChanging();
            entity.ResponseSet = this;
        }

        private void detach_Answer(Answer entity)
        {
            this.SendPropertyChanging();
            entity.ResponseSet = null;
        }
    }

    [Table(Name = "Server")]
    public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Address;

        private EntitySet<Settings> _Settings;

        private EntitySet<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        #endregion

        public Server()
        {
            this._Settings = new EntitySet<Settings>(new Action<Settings>(this.attach_Settings), new Action<Settings>(this.detach_Settings));
            this._User = new EntitySet<User>(new Action<User>(this.attach_User), new Action<User>(this.detach_User));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Address", DbType = "NVarChar(256) NOT NULL", CanBeNull = false)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if ((this._Address != value))
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        [Association(Name = "FK_Settings_Server", Storage = "_Settings", ThisKey = "ID", OtherKey = "ServerID", DeleteRule = "NO ACTION")]
        public EntitySet<Settings> Settings
        {
            get
            {
                return this._Settings;
            }
            set
            {
                this._Settings.Assign(value);
            }
        }

        [Association(Name = "FK_Users_Server", Storage = "_User", ThisKey = "ID", OtherKey = "ServerID", DeleteRule = "NO ACTION")]
        public EntitySet<User> User
        {
            get
            {
                return this._User;
            }
            set
            {
                this._User.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Settings(Settings entity)
        {
            this.SendPropertyChanging();
            entity.Server = this;
        }

        private void detach_Settings(Settings entity)
        {
            this.SendPropertyChanging();
            entity.Server = null;
        }

        private void attach_User(User entity)
        {
            this.SendPropertyChanging();
            entity.Server = this;
        }

        private void detach_User(User entity)
        {
            this.SendPropertyChanging();
            entity.Server = null;
        }
    }

    [Table(Name = "Settings")]
    public partial class Settings : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private bool _IsGpsEnabled;

        private bool _CheckForNewSurveys;

        private int _PhotoResolutionID;

        private int _LanguageID;

        private int _ServerID;

        private System.Nullable<bool> _IsDefault;

        private EntityRef<Language> _Language;

        private EntityRef<PhotoResolution> _PhotoResolution;

        private EntityRef<Server> _Server;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnIsGpsEnabledChanging(bool value);
        partial void OnIsGpsEnabledChanged();
        partial void OnCheckForNewSurveysChanging(bool value);
        partial void OnCheckForNewSurveysChanged();
        partial void OnPhotoResolutionIDChanging(int value);
        partial void OnPhotoResolutionIDChanged();
        partial void OnLanguageIDChanging(int value);
        partial void OnLanguageIDChanged();
        partial void OnServerIDChanging(int value);
        partial void OnServerIDChanged();
        partial void OnIsDefaultChanging(System.Nullable<bool> value);
        partial void OnIsDefaultChanged();
        #endregion

        public Settings()
        {
            this._Language = default(EntityRef<Language>);
            this._PhotoResolution = default(EntityRef<PhotoResolution>);
            this._Server = default(EntityRef<Server>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_IsGpsEnabled", DbType = "Bit NOT NULL")]
        public bool IsGpsEnabled
        {
            get
            {
                return this._IsGpsEnabled;
            }
            set
            {
                if ((this._IsGpsEnabled != value))
                {
                    this.OnIsGpsEnabledChanging(value);
                    this.SendPropertyChanging();
                    this._IsGpsEnabled = value;
                    this.SendPropertyChanged("IsGpsEnabled");
                    this.OnIsGpsEnabledChanged();
                }
            }
        }

        [Column(Storage = "_CheckForNewSurveys", DbType = "Bit NOT NULL")]
        public bool CheckForNewSurveys
        {
            get
            {
                return this._CheckForNewSurveys;
            }
            set
            {
                if ((this._CheckForNewSurveys != value))
                {
                    this.OnCheckForNewSurveysChanging(value);
                    this.SendPropertyChanging();
                    this._CheckForNewSurveys = value;
                    this.SendPropertyChanged("CheckForNewSurveys");
                    this.OnCheckForNewSurveysChanged();
                }
            }
        }

        [Column(Storage = "_PhotoResolutionID", DbType = "Int NOT NULL")]
        public int PhotoResolutionID
        {
            get
            {
                return this._PhotoResolutionID;
            }
            set
            {
                if ((this._PhotoResolutionID != value))
                {
                    if (this._PhotoResolution.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnPhotoResolutionIDChanging(value);
                    this.SendPropertyChanging();
                    this._PhotoResolutionID = value;
                    this.SendPropertyChanged("PhotoResolutionID");
                    this.OnPhotoResolutionIDChanged();
                }
            }
        }

        [Column(Storage = "_LanguageID", DbType = "Int NOT NULL")]
        public int LanguageID
        {
            get
            {
                return this._LanguageID;
            }
            set
            {
                if ((this._LanguageID != value))
                {
                    if (this._Language.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLanguageIDChanging(value);
                    this.SendPropertyChanging();
                    this._LanguageID = value;
                    this.SendPropertyChanged("LanguageID");
                    this.OnLanguageIDChanged();
                }
            }
        }

        [Column(Storage = "_ServerID", DbType = "Int NOT NULL")]
        public int ServerID
        {
            get
            {
                return this._ServerID;
            }
            set
            {
                if ((this._ServerID != value))
                {
                    if (this._Server.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnServerIDChanging(value);
                    this.SendPropertyChanging();
                    this._ServerID = value;
                    this.SendPropertyChanged("ServerID");
                    this.OnServerIDChanged();
                }
            }
        }

        [Column(Storage = "_IsDefault", DbType = "Bit")]
        public System.Nullable<bool> IsDefault
        {
            get
            {
                return this._IsDefault;
            }
            set
            {
                if ((this._IsDefault != value))
                {
                    this.OnIsDefaultChanging(value);
                    this.SendPropertyChanging();
                    this._IsDefault = value;
                    this.SendPropertyChanged("IsDefault");
                    this.OnIsDefaultChanged();
                }
            }
        }

        [Association(Name = "FK_Settings_Language", Storage = "_Language", ThisKey = "LanguageID", OtherKey = "ID", IsForeignKey = true)]
        public Language Language
        {
            get
            {
                return this._Language.Entity;
            }
            set
            {
                Language previousValue = this._Language.Entity;
                if (((previousValue != value)
                            || (this._Language.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Language.Entity = null;
                        previousValue.Settings.Remove(this);
                    }
                    this._Language.Entity = value;
                    if ((value != null))
                    {
                        value.Settings.Add(this);
                        this._LanguageID = value.ID;
                    }
                    else
                    {
                        this._LanguageID = default(int);
                    }
                    this.SendPropertyChanged("Language");
                }
            }
        }

        [Association(Name = "FK_Settings_PhotoResolution", Storage = "_PhotoResolution", ThisKey = "PhotoResolutionID", OtherKey = "ID", IsForeignKey = true)]
        public PhotoResolution PhotoResolution
        {
            get
            {
                return this._PhotoResolution.Entity;
            }
            set
            {
                PhotoResolution previousValue = this._PhotoResolution.Entity;
                if (((previousValue != value)
                            || (this._PhotoResolution.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._PhotoResolution.Entity = null;
                        previousValue.Settings.Remove(this);
                    }
                    this._PhotoResolution.Entity = value;
                    if ((value != null))
                    {
                        value.Settings.Add(this);
                        this._PhotoResolutionID = value.ID;
                    }
                    else
                    {
                        this._PhotoResolutionID = default(int);
                    }
                    this.SendPropertyChanged("PhotoResolution");
                }
            }
        }

        [Association(Name = "FK_Settings_Server", Storage = "_Server", ThisKey = "ServerID", OtherKey = "ID", IsForeignKey = true)]
        public Server Server
        {
            get
            {
                return this._Server.Entity;
            }
            set
            {
                Server previousValue = this._Server.Entity;
                if (((previousValue != value)
                            || (this._Server.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Server.Entity = null;
                        previousValue.Settings.Remove(this);
                    }
                    this._Server.Entity = value;
                    if ((value != null))
                    {
                        value.Settings.Add(this);
                        this._ServerID = value.ID;
                    }
                    else
                    {
                        this._ServerID = default(int);
                    }
                    this.SendPropertyChanged("Server");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "Survey")]
    public partial class Survey : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _UserID;

        private string _Name;

        private System.DateTime _DateReceived;

        private string _SystemID;

        private System.Nullable<bool> _IsNew;

        private EntitySet<Category> _Category;

        private EntitySet<ResponseSet> _ResponseSet;

        private EntityRef<User> _User;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnUserIDChanging(int value);
        partial void OnUserIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnDateReceivedChanging(System.DateTime value);
        partial void OnDateReceivedChanged();
        partial void OnSystemIDChanging(string value);
        partial void OnSystemIDChanged();
        partial void OnIsNewChanging(System.Nullable<bool> value);
        partial void OnIsNewChanged();
        #endregion

        public Survey()
        {
            this._Category = new EntitySet<Category>(new Action<Category>(this.attach_Category), new Action<Category>(this.detach_Category));
            this._ResponseSet = new EntitySet<ResponseSet>(new Action<ResponseSet>(this.attach_ResponseSet), new Action<ResponseSet>(this.detach_ResponseSet));
            this._User = default(EntityRef<User>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_UserID", DbType = "Int NOT NULL")]
        public int UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    if (this._User.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnUserIDChanging(value);
                    this.SendPropertyChanging();
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(100)")]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_DateReceived", DbType = "DateTime NOT NULL")]
        public System.DateTime DateReceived
        {
            get
            {
                return this._DateReceived;
            }
            set
            {
                if ((this._DateReceived != value))
                {
                    this.OnDateReceivedChanging(value);
                    this.SendPropertyChanging();
                    this._DateReceived = value;
                    this.SendPropertyChanged("DateReceived");
                    this.OnDateReceivedChanged();
                }
            }
        }

        [Column(Storage = "_SystemID", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string SystemID
        {
            get
            {
                return this._SystemID;
            }
            set
            {
                if ((this._SystemID != value))
                {
                    this.OnSystemIDChanging(value);
                    this.SendPropertyChanging();
                    this._SystemID = value;
                    this.SendPropertyChanged("SystemID");
                    this.OnSystemIDChanged();
                }
            }
        }

        [Column(Storage = "_IsNew", DbType = "Bit")]
        public System.Nullable<bool> IsNew
        {
            get
            {
                return this._IsNew;
            }
            set
            {
                if ((this._IsNew != value))
                {
                    this.OnIsNewChanging(value);
                    this.SendPropertyChanging();
                    this._IsNew = value;
                    this.SendPropertyChanged("IsNew");
                    this.OnIsNewChanged();
                }
            }
        }

        [Association(Name = "FK_Categories_Survey", Storage = "_Category", ThisKey = "ID", OtherKey = "SurveyID", DeleteRule = "CASCADE")]
        public EntitySet<Category> Category
        {
            get
            {
                return this._Category;
            }
            set
            {
                this._Category.Assign(value);
            }
        }

        [Association(Name = "FK_ResponseSets_Survey", Storage = "_ResponseSet", ThisKey = "ID", OtherKey = "SurveyID", DeleteRule = "CASCADE")]
        public EntitySet<ResponseSet> ResponseSet
        {
            get
            {
                return this._ResponseSet;
            }
            set
            {
                this._ResponseSet.Assign(value);
            }
        }

        [Association(Name = "FK_Surveys_User", Storage = "_User", ThisKey = "UserID", OtherKey = "ID", IsForeignKey = true)]
        public User User
        {
            get
            {
                return this._User.Entity;
            }
            set
            {
                User previousValue = this._User.Entity;
                if (((previousValue != value)
                            || (this._User.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._User.Entity = null;
                        previousValue.Survey.Remove(this);
                    }
                    this._User.Entity = value;
                    if ((value != null))
                    {
                        value.Survey.Add(this);
                        this._UserID = value.ID;
                    }
                    else
                    {
                        this._UserID = default(int);
                    }
                    this.SendPropertyChanged("User");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Category(Category entity)
        {
            this.SendPropertyChanging();
            entity.Survey = this;
        }

        private void detach_Category(Category entity)
        {
            this.SendPropertyChanging();
            entity.Survey = null;
        }

        private void attach_ResponseSet(ResponseSet entity)
        {
            this.SendPropertyChanging();
            entity.Survey = this;
        }

        private void detach_ResponseSet(ResponseSet entity)
        {
            this.SendPropertyChanging();
            entity.Survey = null;
        }
    }

    [Table(Name = "User")]
    public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ServerID;

        private string _Name;

        private string _Password;

        private bool _IsCurrent;

        private EntitySet<ResponseSet> _ResponseSet;

        private EntitySet<Survey> _Survey;

        private EntityRef<Server> _Server;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnServerIDChanging(int value);
        partial void OnServerIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnIsCurrentChanging(bool value);
        partial void OnIsCurrentChanged();
        #endregion

        public User()
        {
            this._ResponseSet = new EntitySet<ResponseSet>(new Action<ResponseSet>(this.attach_ResponseSet), new Action<ResponseSet>(this.detach_ResponseSet));
            this._Survey = new EntitySet<Survey>(new Action<Survey>(this.attach_Survey), new Action<Survey>(this.detach_Survey));
            this._Server = default(EntityRef<Server>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_ServerID", DbType = "Int NOT NULL")]
        public int ServerID
        {
            get
            {
                return this._ServerID;
            }
            set
            {
                if ((this._ServerID != value))
                {
                    if (this._Server.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnServerIDChanging(value);
                    this.SendPropertyChanging();
                    this._ServerID = value;
                    this.SendPropertyChanged("ServerID");
                    this.OnServerIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_Password", DbType = "NVarChar(100) NOT NULL", CanBeNull = false)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        [Column(Storage = "_IsCurrent", DbType = "Bit NOT NULL")]
        public bool IsCurrent
        {
            get
            {
                return this._IsCurrent;
            }
            set
            {
                if ((this._IsCurrent != value))
                {
                    this.OnIsCurrentChanging(value);
                    this.SendPropertyChanging();
                    this._IsCurrent = value;
                    this.SendPropertyChanged("IsCurrent");
                    this.OnIsCurrentChanged();
                }
            }
        }

        [Association(Name = "FK_ResponseSets_User", Storage = "_ResponseSet", ThisKey = "ID", OtherKey = "UserID", DeleteRule = "NO ACTION")]
        public EntitySet<ResponseSet> ResponseSet
        {
            get
            {
                return this._ResponseSet;
            }
            set
            {
                this._ResponseSet.Assign(value);
            }
        }

        [Association(Name = "FK_Surveys_User", Storage = "_Survey", ThisKey = "ID", OtherKey = "UserID", DeleteRule = "NO ACTION")]
        public EntitySet<Survey> Survey
        {
            get
            {
                return this._Survey;
            }
            set
            {
                this._Survey.Assign(value);
            }
        }

        [Association(Name = "FK_Users_Server", Storage = "_Server", ThisKey = "ServerID", OtherKey = "ID", IsForeignKey = true)]
        public Server Server
        {
            get
            {
                return this._Server.Entity;
            }
            set
            {
                Server previousValue = this._Server.Entity;
                if (((previousValue != value)
                            || (this._Server.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Server.Entity = null;
                        previousValue.User.Remove(this);
                    }
                    this._Server.Entity = value;
                    if ((value != null))
                    {
                        value.User.Add(this);
                        this._ServerID = value.ID;
                    }
                    else
                    {
                        this._ServerID = default(int);
                    }
                    this.SendPropertyChanged("Server");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_ResponseSet(ResponseSet entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_ResponseSet(ResponseSet entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }

        private void attach_Survey(Survey entity)
        {
            this.SendPropertyChanging();
            entity.User = this;
        }

        private void detach_Survey(Survey entity)
        {
            this.SendPropertyChanging();
            entity.User = null;
        }
    }
}
#pragma warning restore 1591
